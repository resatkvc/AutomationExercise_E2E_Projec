pipeline {
    agent {
        docker {
            image 'maven:3.9.6-openjdk-17'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        // PostgreSQL Docker container ayarları
        POSTGRES_CONTAINER_NAME = 'jenkins-postgres-db'
        POSTGRES_USER = 'testuser'
        POSTGRES_PASSWORD = 'testpass'
        POSTGRES_DB = 'testdb'
        POSTGRES_PORT = '5432'
        
        // Chrome ve ChromeDriver ayarları
        CHROME_BIN = '/usr/bin/google-chrome'
        CHROMEDRIVER_PATH = '/usr/local/bin/chromedriver'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo '🔄 Kod deposundan proje çekiliyor...'
                checkout scm
            }
        }
        
        stage('Setup Chrome and ChromeDriver') {
            steps {
                script {
                    echo '🌐 Chrome ve ChromeDriver kurulumu yapılıyor...'
                    
                    // Sistem paketlerini güncelle
                    sh '''
                        apt-get update
                        apt-get install -y wget unzip gnupg2
                    '''
                    
                    // Chrome kurulumu
                    sh '''
                        if ! command -v google-chrome &> /dev/null; then
                            echo "Chrome kuruluyor..."
                            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
                            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | tee /etc/apt/sources.list.d/google-chrome.list
                            apt-get update
                            apt-get install -y google-chrome-stable
                        else
                            echo "Chrome zaten kurulu"
                        fi
                    '''
                    
                    // ChromeDriver kurulumu
                    sh '''
                        if ! command -v chromedriver &> /dev/null; then
                            echo "ChromeDriver kuruluyor..."
                            CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | awk -F'.' '{print $1}')
                            wget -O /tmp/chromedriver.zip https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}/chromedriver_linux64.zip
                            unzip /tmp/chromedriver.zip -d /tmp/
                            mv /tmp/chromedriver /usr/local/bin/
                            chmod +x /usr/local/bin/chromedriver
                            rm /tmp/chromedriver.zip
                        else
                            echo "ChromeDriver zaten kurulu"
                        fi
                    '''
                    
                    // Chrome ve ChromeDriver versiyonlarını kontrol et
                    sh '''
                        echo "Chrome versiyonu:"
                        google-chrome --version
                        echo "ChromeDriver versiyonu:"
                        chromedriver --version
                    '''
                    
                    echo '✅ Chrome ve ChromeDriver kurulumu tamamlandı!'
                }
            }
        }
        
        stage('Setup PostgreSQL') {
            steps {
                script {
                    echo '🐘 PostgreSQL Docker container başlatılıyor...'
                    
                    // Eğer container zaten varsa durdur ve sil
                    sh '''
                        docker stop ${POSTGRES_CONTAINER_NAME} || true
                        docker rm ${POSTGRES_CONTAINER_NAME} || true
                    '''
                    
                    // Yeni PostgreSQL container başlat
                    sh '''
                        docker run -d \
                            --name ${POSTGRES_CONTAINER_NAME} \
                            -e POSTGRES_USER=${POSTGRES_USER} \
                            -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} \
                            -e POSTGRES_DB=${POSTGRES_DB} \
                            -p ${POSTGRES_PORT}:5432 \
                            postgres:15
                    '''
                    
                    // Container'ın başlamasını bekle
                    sh '''
                        echo "PostgreSQL container başlatılıyor..."
                        sleep 10
                        docker ps | grep ${POSTGRES_CONTAINER_NAME}
                    '''
                    
                    echo '✅ PostgreSQL container başarıyla başlatıldı!'
                }
            }
        }
        
        stage('Build') {
            steps {
                echo '🔨 Proje derleniyor...'
                sh 'mvn clean compile'
            }
        }
        
        stage('Test') {
            steps {
                echo '🧪 Testler çalıştırılıyor...'
                sh 'mvn test'
            }
        }
        
        stage('Archive Reports') {
            steps {
                echo '📊 Raporlar arşivleniyor...'
                
                // ExtentReports HTML dosyasını arşivle
                archiveArtifacts artifacts: 'ExtentReport.html', fingerprint: true
                
                // Screenshot klasörünü arşivle (varsa)
                archiveArtifacts artifacts: 'Screenshot/**/*', fingerprint: true, allowEmptyArchive: true
                
                // TestNG raporlarını arşivle
                publishTestNG results: '**/testng-results.xml', failureOnFailedTestConfig: false
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo '🧹 Temizlik yapılıyor...'
                    
                    // PostgreSQL container'ı durdur ve sil
                    sh '''
                        docker stop ${POSTGRES_CONTAINER_NAME} || true
                        docker rm ${POSTGRES_CONTAINER_NAME} || true
                    '''
                    
                    echo '✅ Temizlik tamamlandı!'
                }
            }
        }
    }
    
    post {
        always {
            echo '📋 Pipeline tamamlandı!'
            
            // Test sonuçlarını göster
            script {
                if (currentBuild.result == 'SUCCESS') {
                    echo '🎉 Tüm testler başarıyla geçti!'
                } else if (currentBuild.result == 'UNSTABLE') {
                    echo '⚠️ Bazı testler başarısız oldu!'
                } else {
                    echo '❌ Pipeline başarısız oldu!'
                }
            }
        }
        
        success {
            echo '✅ Pipeline başarıyla tamamlandı!'
        }
        
        failure {
            echo '❌ Pipeline başarısız oldu!'
            
            // Hata durumunda PostgreSQL container'ı temizle
            script {
                sh '''
                    docker stop ${POSTGRES_CONTAINER_NAME} || true
                    docker rm ${POSTGRES_CONTAINER_NAME} || true
                '''
            }
        }
        
        cleanup {
            echo '🧹 Son temizlik işlemleri...'
        }
    }
} 